#南希 2000012824



#思路：



#1、先10层循环展开，再对余数使用跳转表



#2、避免加载/使用影响性能，采取的操作是前面的循环展开一次从内存中读取2个，之后将这两个在写回到内存中

#   在余数的处理中则是直接从内存中接连取出3个可能存在的数



#3、使用iaddq指令



#4、其他tricks:可以将跳转表的起始位置进行调整，调整到跳转表的末尾附近，这样可以减少一条   iaddq $10,%rdx   的指令



#/* $begin ncopy-ys */



##################################################################



# ncopy.ys - Copy a src block of len words to dst.



# Return the number of positive words (>0) contained in src.



#



# Include your name and ID here.



#



# Describe how and why you modified the baseline code.



#



##################################################################



# Do not modify this portion



# Function prologue.



# %rdi = src, %rsi = dst, %rdx = len



ncopy:







##################################################################



# You can modify this portion



     	irmovq $0,  %rax



L1:



#进入10层循环展开

	

      	iaddq    $-10,%rdx



	jl    L25			#若len<10



        mrmovq    (%rdi),%rcx		#  *src



	mrmovq    0x8(%rdi),%r10	#避免加载使用冒险



        rmmovq    %rcx,(%rsi)		#  *dst=*src



        andq   %rcx,%rcx



        jle    L3



  	iaddq    $0x1,%rax		#如果*src>0,cnt++





L3:  



       	rmmovq    %r10,0x8(%rsi)



     	andq   %r10,%r10



   	jle    L4



  	iaddq    $0x1,%rax







L4:







  	mrmovq    0x10(%rdi),%rcx



	mrmovq    0x18(%rdi),%r10



  	rmmovq    %rcx,0x10(%rsi)



     	andq   %rcx,%rcx



    	jle    L5



    	iaddq    $0x1,%rax







L5:







    	rmmovq    %r10,0x18(%rsi)



        andq   %r10,%r10



    	jle    L6



    	iaddq    $0x1,%rax





L6:







  	mrmovq    0x20(%rdi),%rcx



	mrmovq    0x28(%rdi),%r10



  	rmmovq    %rcx,0x20(%rsi)



 	andq   %rcx,%rcx



  	jle    L7



  	iaddq    $0x1,%rax







L7:



    	



  	rmmovq    %r10,0x28(%rsi)



    	andq   %r10,%r10



     	jle    L8



   	iaddq    $0x1,%rax







L8:







  	mrmovq    0x30(%rdi),%rcx



	mrmovq    0x38(%rdi),%r10



  	rmmovq    %rcx,0x30(%rsi)



   	andq   %rcx,%rcx



    	jle    L9



   	iaddq    $0x1,%rax







L9:

					



     	rmmovq    %r10,0x38(%rsi)



    	andq   %r10,%r10



	jle    L21



    	iaddq    $0x1,%rax







L21:







  	mrmovq    0x40(%rdi),%rcx



	mrmovq    0x48(%rdi),%r10



  	rmmovq    %rcx,0x40(%rsi)



   	andq   %rcx,%rcx



    	jle    L22



   	iaddq    $0x1,%rax







L22:



					



     	rmmovq    %r10,0x48(%rsi)



	iaddq    $0x50,%rdi



   	iaddq    $0x50,%rsi



	andq   %r10,%r10



	jle    L1



    	iaddq    $0x1,%rax



  	jmp   L1



#10层循环结束，要处理余数



L25:



	#iaddq $10,%rdx		#0 1 2 3 4 5 6 7 8 9



	addq %rdx,%rdx



	addq %rdx,%rdx



	addq %rdx,%rdx



	mrmovq JP(%rdx),%rdx



	mrmovq (%rdi), %r10



	mrmovq 0x8(%rdi), %r9



	mrmovq 0x10(%rdi), %r8

	

	pushq %rdx



	ret



r9:

	

	mrmovq 0x40(%rdi), %rcx	



	rmmovq %rcx, 0x40(%rsi)	



	andq %rcx, %rcx		



	jle r8			



	iaddq $1,%rax		





r8:



	mrmovq 0x38(%rdi), %rcx	



	rmmovq %rcx, 0x38(%rsi)	



	andq %rcx, %rcx		



	jle r7			



	iaddq $1,%rax		



r7:	



	mrmovq 0x30(%rdi), %rcx	



	rmmovq %rcx, 0x30(%rsi)	



	andq %rcx, %rcx		



	jle r6			



	iaddq $1,%rax		







r6:	

	

	mrmovq 0x28(%rdi), %rcx	



	rmmovq %rcx, 0x28(%rsi)	



	andq %rcx, %rcx		



	jle r5			



	iaddq $1,%rax		







r5:	

	

	mrmovq 0x20(%rdi), %rcx	



	rmmovq %rcx, 0x20(%rsi)	



	andq %rcx, %rcx		



	jle r4			



	iaddq $1,%rax		





r4:	

	mrmovq 0x18(%rdi), %rcx	



	rmmovq %rcx, 0x18(%rsi)	



	andq %rcx, %rcx		



	jle r3			



	iaddq $1,%rax		





r3:	





	rmmovq %r8, 0x10(%rsi)	



	andq %r8, %r8		



	jle r2			



	iaddq $1,%rax		





r2:	





	rmmovq %r9, 0x8(%rsi)	



	andq %r9, %r9		



	jle r1			



	iaddq $1,%rax		





r1:	

	

	rmmovq %r10, (%rsi)	



	andq %r10, %r10		



	jle 0x31			



	iaddq $1,%rax	

	

 	jmp 0x31	

	



##################################################################

# Do not modify the following section of code

# Function epilogue.

Done:

	ret

##################################################################

#JP:

	.quad  Done



	.quad  r1



	.quad  r2



	.quad  r3



	.quad  r4



	.quad  r5



	.quad  r6



	.quad  r7



	.quad  r8



	.quad  r9



JP:	.quad  r9







# Keep the following label at the end of your function

End:

#/* $end ncopy-ys */
